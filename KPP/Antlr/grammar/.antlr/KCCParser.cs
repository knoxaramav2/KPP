//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\MMI\Documents\tmpdev\KPP\KPP\Antlr\grammar\KCC.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class KCCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, IF=9, 
		ELSE=10, WHILE=11, FOREACH=12, CONTINUE=13, BREAK=14, RETURN=15, GOTO=16, 
		SET=17, ADD=18, SUBTRACT=19, MULTIPLY=20, DIVIDE=21, EXPONENT=22, MODULO=23, 
		SET_SUM=24, SET_DIFFERENCE=25, SET_PRODUCT=26, SET_QUOTIENT=27, INCREMENT=28, 
		DECRIMENT=29, LOGIC_OR=30, LOGIC_AND=31, LOGIC_NOT=32, LOGIC_NAND=33, 
		LOGIC_NOR=34, LOGIC_XOR=35, LOGIC_XNOR=36, GTR=37, LSS=38, EQU=39, GTR_EQU=40, 
		LSS_EQU=41, BITWISE_AND=42, BITWISE_OR=43, BITWISE_INVERT=44, CLASS=45, 
		THIS=46, TRUE=47, FALSE=48, ASSEMBLY=49, JOINT=50, DOT=51, L_BRACKET=52, 
		R_BRACKET=53, L_PARANTH=54, R_PARANTH=55, L_BRACE=56, R_BRACE=57, LINE_COMMENT=58, 
		BLOCK_COMMENT=59, DECIMAL=60, IDENTIFIER=61, SEMI=62, WS=63;
	public const int
		RULE_rules = 0, RULE_asm = 1, RULE_block = 2, RULE_class = 3, RULE_statement = 4, 
		RULE_expression = 5, RULE_call = 6, RULE_function = 7, RULE_function_decl = 8, 
		RULE_function_call = 9, RULE_assign_expr = 10, RULE_var_decl = 11, RULE_group = 12, 
		RULE_asm_id = 13, RULE_value_id = 14, RULE_symbol_id = 15, RULE_logic_id = 16, 
		RULE_identifier = 17, RULE_control_block = 18, RULE_control_id = 19, RULE_unary_ops = 20, 
		RULE_binary_arith_ops = 21, RULE_assign_ops = 22, RULE_binary_logic_ops = 23, 
		RULE_binary = 24, RULE_bool = 25, RULE_arith_expr = 26, RULE_type_specifier = 27, 
		RULE_array = 28, RULE_assembly = 29, RULE_semi = 30;
	public static readonly string[] ruleNames = {
		"rules", "asm", "block", "class", "statement", "expression", "call", "function", 
		"function_decl", "function_call", "assign_expr", "var_decl", "group", 
		"asm_id", "value_id", "symbol_id", "logic_id", "identifier", "control_block", 
		"control_id", "unary_ops", "binary_arith_ops", "assign_ops", "binary_logic_ops", 
		"binary", "bool", "arith_expr", "type_specifier", "array", "assembly", 
		"semi"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'sint'", "'double'", "'char'", "'byte'", "'string'", "'bool'", 
		"'asm'", "'if'", "'else'", "'while'", "'foreach'", "'continue'", "'break'", 
		"'return'", "'goto'", "'='", "'+'", "'-'", "'*'", "'/'", "'**'", "'%'", 
		"'+='", "'-='", "'*='", "'/='", "'++'", "'--'", "'||'", "'&&'", "'!'", 
		"'!&'", "'!|'", "'^|'", "'^!'", "'>'", "'<'", "'=='", "'>='", "'<='", 
		"'&'", "'|'", "'~'", "'class'", "'this'", "'true'", "'false'", "'assembly'", 
		"':'", "'.'", "'['", "']'", "'('", "')'", "'{'", "'}'", null, null, null, 
		null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "IF", "ELSE", "WHILE", 
		"FOREACH", "CONTINUE", "BREAK", "RETURN", "GOTO", "SET", "ADD", "SUBTRACT", 
		"MULTIPLY", "DIVIDE", "EXPONENT", "MODULO", "SET_SUM", "SET_DIFFERENCE", 
		"SET_PRODUCT", "SET_QUOTIENT", "INCREMENT", "DECRIMENT", "LOGIC_OR", "LOGIC_AND", 
		"LOGIC_NOT", "LOGIC_NAND", "LOGIC_NOR", "LOGIC_XOR", "LOGIC_XNOR", "GTR", 
		"LSS", "EQU", "GTR_EQU", "LSS_EQU", "BITWISE_AND", "BITWISE_OR", "BITWISE_INVERT", 
		"CLASS", "THIS", "TRUE", "FALSE", "ASSEMBLY", "JOINT", "DOT", "L_BRACKET", 
		"R_BRACKET", "L_PARANTH", "R_PARANTH", "L_BRACE", "R_BRACE", "LINE_COMMENT", 
		"BLOCK_COMMENT", "DECIMAL", "IDENTIFIER", "SEMI", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KCC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KCCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KCCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KCCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RulesContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(KCCParser.Eof, 0); }
		public AsmContext[] asm() {
			return GetRuleContexts<AsmContext>();
		}
		public AsmContext asm(int i) {
			return GetRuleContext<AsmContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 0, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 62; asm();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__7 || _la==ASSEMBLY );
			State = 67; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmContext : ParserRuleContext {
		public AssemblyContext assembly() {
			return GetRuleContext<AssemblyContext>(0);
		}
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AsmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asm; } }
	}

	[RuleVersion(0)]
	public AsmContext asm() {
		AsmContext _localctx = new AsmContext(Context, State);
		EnterRule(_localctx, 2, RULE_asm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; assembly();
			State = 70; symbol_id();
			State = 71; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode L_BRACE() { return GetToken(KCCParser.L_BRACE, 0); }
		public ITerminalNode[] R_BRACE() { return GetTokens(KCCParser.R_BRACE); }
		public ITerminalNode R_BRACE(int i) {
			return GetToken(KCCParser.R_BRACE, i);
		}
		public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; Match(L_BRACE);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 76;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 74; @class();
						}
						break;
					case 2:
						{
						State = 75;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (_la==R_BRACE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << IF) | (1L << ELSE) | (1L << WHILE) | (1L << FOREACH) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << GOTO) | (1L << SET) | (1L << ADD) | (1L << SUBTRACT) | (1L << MULTIPLY) | (1L << DIVIDE) | (1L << EXPONENT) | (1L << MODULO) | (1L << SET_SUM) | (1L << SET_DIFFERENCE) | (1L << SET_PRODUCT) | (1L << SET_QUOTIENT) | (1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_OR) | (1L << LOGIC_AND) | (1L << LOGIC_NOT) | (1L << LOGIC_NAND) | (1L << LOGIC_NOR) | (1L << LOGIC_XOR) | (1L << LOGIC_XNOR) | (1L << GTR) | (1L << LSS) | (1L << EQU) | (1L << GTR_EQU) | (1L << LSS_EQU) | (1L << BITWISE_AND) | (1L << BITWISE_OR) | (1L << BITWISE_INVERT) | (1L << CLASS) | (1L << THIS) | (1L << TRUE) | (1L << FALSE) | (1L << ASSEMBLY) | (1L << JOINT) | (1L << DOT) | (1L << L_BRACKET) | (1L << R_BRACKET) | (1L << L_PARANTH) | (1L << R_PARANTH) | (1L << L_BRACE) | (1L << LINE_COMMENT) | (1L << BLOCK_COMMENT) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << SEMI) | (1L << WS))) != 0) );
				State = 80; Match(R_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; Match(L_BRACE);
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 87;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 82; @class();
						}
						break;
					case 2:
						{
						State = 83; function();
						}
						break;
					case 3:
						{
						State = 84; block();
						}
						break;
					case 4:
						{
						State = 85; expression(0);
						}
						break;
					case 5:
						{
						State = 86;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (_la==R_BRACE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					State = 89;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << IF) | (1L << ELSE) | (1L << WHILE) | (1L << FOREACH) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << GOTO) | (1L << SET) | (1L << ADD) | (1L << SUBTRACT) | (1L << MULTIPLY) | (1L << DIVIDE) | (1L << EXPONENT) | (1L << MODULO) | (1L << SET_SUM) | (1L << SET_DIFFERENCE) | (1L << SET_PRODUCT) | (1L << SET_QUOTIENT) | (1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_OR) | (1L << LOGIC_AND) | (1L << LOGIC_NOT) | (1L << LOGIC_NAND) | (1L << LOGIC_NOR) | (1L << LOGIC_XOR) | (1L << LOGIC_XNOR) | (1L << GTR) | (1L << LSS) | (1L << EQU) | (1L << GTR_EQU) | (1L << LSS_EQU) | (1L << BITWISE_AND) | (1L << BITWISE_OR) | (1L << BITWISE_INVERT) | (1L << CLASS) | (1L << THIS) | (1L << TRUE) | (1L << FALSE) | (1L << ASSEMBLY) | (1L << JOINT) | (1L << DOT) | (1L << L_BRACKET) | (1L << R_BRACKET) | (1L << L_PARANTH) | (1L << R_PARANTH) | (1L << L_BRACE) | (1L << LINE_COMMENT) | (1L << BLOCK_COMMENT) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << SEMI) | (1L << WS))) != 0) );
				State = 91; Match(R_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(KCCParser.CLASS, 0); }
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 6, RULE_class);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(CLASS);
			State = 95; symbol_id();
			State = 96; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public SemiContext semi() {
			return GetRuleContext<SemiContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KCCParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KCCParser.IDENTIFIER, i);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << IF) | (1L << ELSE) | (1L << WHILE) | (1L << FOREACH) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << GOTO) | (1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_NOT) | (1L << CLASS) | (1L << TRUE) | (1L << FALSE) | (1L << L_PARANTH) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 99; expression(0);
					}
					}
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 105; semi();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106; Match(IDENTIFIER);
				State = 107; Match(IDENTIFIER);
				State = 108; group();
				State = 109; block();
				State = 110; semi();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public Unary_opsContext unary_ops() {
			return GetRuleContext<Unary_opsContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 115; assign_expr();
				}
				break;
			case 2:
				{
				State = 116; var_decl();
				}
				break;
			case 3:
				{
				State = 117; symbol_id();
				}
				break;
			case 4:
				{
				State = 118; group();
				}
				break;
			case 5:
				{
				State = 119; unary_ops();
				State = 120; expression(4);
				}
				break;
			case 6:
				{
				State = 122; @bool();
				}
				break;
			case 7:
				{
				State = 123; type_specifier(0);
				State = 124; symbol_id();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 134;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 128;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 129; binary();
					State = 130; expression(4);
					}
					} 
				}
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 12, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; symbol_id();
			State = 138; group();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public Function_declContext function_decl() {
			return GetRuleContext<Function_declContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140; function_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Function_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_decl; } }
	}

	[RuleVersion(0)]
	public Function_declContext function_decl() {
		Function_declContext _localctx = new Function_declContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; identifier();
			State = 145; function_call();
			State = 146; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; identifier();
			State = 149; group();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_exprContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Assign_opsContext assign_ops() {
			return GetRuleContext<Assign_opsContext>(0);
		}
		public Value_idContext value_id() {
			return GetRuleContext<Value_idContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_expr; } }
	}

	[RuleVersion(0)]
	public Assign_exprContext assign_expr() {
		Assign_exprContext _localctx = new Assign_exprContext(Context, State);
		EnterRule(_localctx, 20, RULE_assign_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; identifier();
			State = 152; assign_ops();
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 153; value_id();
				}
				break;
			case 2:
				{
				State = 154; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 22, RULE_var_decl);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; identifier();
				State = 158; assign_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160; identifier();
				State = 161; symbol_id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(KCCParser.L_PARANTH, 0); }
		public ITerminalNode[] R_PARANTH() { return GetTokens(KCCParser.R_PARANTH); }
		public ITerminalNode R_PARANTH(int i) {
			return GetToken(KCCParser.R_PARANTH, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 24, RULE_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(L_PARANTH);
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 166; expression(0);
				}
				break;
			case 2:
				{
				State = 167;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==R_PARANTH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 170; Match(R_PARANTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asm_idContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(KCCParser.IDENTIFIER, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(KCCParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(KCCParser.DOT, i);
		}
		public Asm_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asm_id; } }
	}

	[RuleVersion(0)]
	public Asm_idContext asm_id() {
		Asm_idContext _localctx = new Asm_idContext(Context, State);
		EnterRule(_localctx, 26, RULE_asm_id);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 172; identifier();
					State = 173; Match(DOT);
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 180; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_idContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(KCCParser.DECIMAL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(KCCParser.IDENTIFIER, 0); }
		public Logic_idContext logic_id() {
			return GetRuleContext<Logic_idContext>(0);
		}
		public Value_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_id; } }
	}

	[RuleVersion(0)]
	public Value_idContext value_id() {
		Value_idContext _localctx = new Value_idContext(Context, State);
		EnterRule(_localctx, 28, RULE_value_id);
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; Match(DECIMAL);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; Match(IDENTIFIER);
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; logic_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_idContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KCCParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KCCParser.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(KCCParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(KCCParser.DOT, i);
		}
		public Symbol_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_id; } }
	}

	[RuleVersion(0)]
	public Symbol_idContext symbol_id() {
		Symbol_idContext _localctx = new Symbol_idContext(Context, State);
		EnterRule(_localctx, 30, RULE_symbol_id);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 187; Match(IDENTIFIER);
			}
			State = 192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 188; Match(DOT);
					State = 189; Match(IDENTIFIER);
					}
					} 
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logic_idContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(KCCParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(KCCParser.FALSE, 0); }
		public Logic_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_id; } }
	}

	[RuleVersion(0)]
	public Logic_idContext logic_id() {
		Logic_idContext _localctx = new Logic_idContext(Context, State);
		EnterRule(_localctx, 32, RULE_logic_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public Control_blockContext control_block() {
			return GetRuleContext<Control_blockContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(KCCParser.RETURN, 0); }
		public Control_idContext control_id() {
			return GetRuleContext<Control_idContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_identifier);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; type_specifier(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198; symbol_id();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 199; control_block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 200; Match(RETURN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 201; control_id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_blockContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(KCCParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(KCCParser.ELSE, 0); }
		public ITerminalNode WHILE() { return GetToken(KCCParser.WHILE, 0); }
		public ITerminalNode FOREACH() { return GetToken(KCCParser.FOREACH, 0); }
		public Control_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_block; } }
	}

	[RuleVersion(0)]
	public Control_blockContext control_block() {
		Control_blockContext _localctx = new Control_blockContext(Context, State);
		EnterRule(_localctx, 36, RULE_control_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ELSE) | (1L << WHILE) | (1L << FOREACH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_idContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(KCCParser.CONTINUE, 0); }
		public ITerminalNode BREAK() { return GetToken(KCCParser.BREAK, 0); }
		public ITerminalNode GOTO() { return GetToken(KCCParser.GOTO, 0); }
		public ITerminalNode RETURN() { return GetToken(KCCParser.RETURN, 0); }
		public Control_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_id; } }
	}

	[RuleVersion(0)]
	public Control_idContext control_id() {
		Control_idContext _localctx = new Control_idContext(Context, State);
		EnterRule(_localctx, 38, RULE_control_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << GOTO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_opsContext : ParserRuleContext {
		public ITerminalNode INCREMENT() { return GetToken(KCCParser.INCREMENT, 0); }
		public ITerminalNode DECRIMENT() { return GetToken(KCCParser.DECRIMENT, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(KCCParser.LOGIC_NOT, 0); }
		public Unary_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_ops; } }
	}

	[RuleVersion(0)]
	public Unary_opsContext unary_ops() {
		Unary_opsContext _localctx = new Unary_opsContext(Context, State);
		EnterRule(_localctx, 40, RULE_unary_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECRIMENT) | (1L << LOGIC_NOT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_arith_opsContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(KCCParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(KCCParser.ADD, 0); }
		public ITerminalNode SUBTRACT() { return GetToken(KCCParser.SUBTRACT, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(KCCParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(KCCParser.DIVIDE, 0); }
		public ITerminalNode EXPONENT() { return GetToken(KCCParser.EXPONENT, 0); }
		public ITerminalNode MODULO() { return GetToken(KCCParser.MODULO, 0); }
		public ITerminalNode SET_SUM() { return GetToken(KCCParser.SET_SUM, 0); }
		public ITerminalNode SET_DIFFERENCE() { return GetToken(KCCParser.SET_DIFFERENCE, 0); }
		public ITerminalNode SET_PRODUCT() { return GetToken(KCCParser.SET_PRODUCT, 0); }
		public ITerminalNode SET_QUOTIENT() { return GetToken(KCCParser.SET_QUOTIENT, 0); }
		public Binary_arith_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_arith_ops; } }
	}

	[RuleVersion(0)]
	public Binary_arith_opsContext binary_arith_ops() {
		Binary_arith_opsContext _localctx = new Binary_arith_opsContext(Context, State);
		EnterRule(_localctx, 42, RULE_binary_arith_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SET) | (1L << ADD) | (1L << SUBTRACT) | (1L << MULTIPLY) | (1L << DIVIDE) | (1L << EXPONENT) | (1L << MODULO) | (1L << SET_SUM) | (1L << SET_DIFFERENCE) | (1L << SET_PRODUCT) | (1L << SET_QUOTIENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_opsContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(KCCParser.SET, 0); }
		public ITerminalNode SET_SUM() { return GetToken(KCCParser.SET_SUM, 0); }
		public ITerminalNode SET_DIFFERENCE() { return GetToken(KCCParser.SET_DIFFERENCE, 0); }
		public ITerminalNode SET_PRODUCT() { return GetToken(KCCParser.SET_PRODUCT, 0); }
		public ITerminalNode SET_QUOTIENT() { return GetToken(KCCParser.SET_QUOTIENT, 0); }
		public Assign_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_ops; } }
	}

	[RuleVersion(0)]
	public Assign_opsContext assign_ops() {
		Assign_opsContext _localctx = new Assign_opsContext(Context, State);
		EnterRule(_localctx, 44, RULE_assign_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SET) | (1L << SET_SUM) | (1L << SET_DIFFERENCE) | (1L << SET_PRODUCT) | (1L << SET_QUOTIENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_logic_opsContext : ParserRuleContext {
		public ITerminalNode LOGIC_OR() { return GetToken(KCCParser.LOGIC_OR, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(KCCParser.LOGIC_AND, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(KCCParser.LOGIC_NOT, 0); }
		public ITerminalNode LOGIC_NAND() { return GetToken(KCCParser.LOGIC_NAND, 0); }
		public ITerminalNode LOGIC_NOR() { return GetToken(KCCParser.LOGIC_NOR, 0); }
		public ITerminalNode LOGIC_XOR() { return GetToken(KCCParser.LOGIC_XOR, 0); }
		public ITerminalNode LOGIC_XNOR() { return GetToken(KCCParser.LOGIC_XNOR, 0); }
		public ITerminalNode GTR() { return GetToken(KCCParser.GTR, 0); }
		public ITerminalNode LSS() { return GetToken(KCCParser.LSS, 0); }
		public ITerminalNode EQU() { return GetToken(KCCParser.EQU, 0); }
		public ITerminalNode GTR_EQU() { return GetToken(KCCParser.GTR_EQU, 0); }
		public ITerminalNode LSS_EQU() { return GetToken(KCCParser.LSS_EQU, 0); }
		public Binary_logic_opsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_logic_ops; } }
	}

	[RuleVersion(0)]
	public Binary_logic_opsContext binary_logic_ops() {
		Binary_logic_opsContext _localctx = new Binary_logic_opsContext(Context, State);
		EnterRule(_localctx, 46, RULE_binary_logic_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LOGIC_OR) | (1L << LOGIC_AND) | (1L << LOGIC_NOT) | (1L << LOGIC_NAND) | (1L << LOGIC_NOR) | (1L << LOGIC_XOR) | (1L << LOGIC_XNOR) | (1L << GTR) | (1L << LSS) | (1L << EQU) | (1L << GTR_EQU) | (1L << LSS_EQU))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		public Binary_arith_opsContext binary_arith_ops() {
			return GetRuleContext<Binary_arith_opsContext>(0);
		}
		public Binary_logic_opsContext binary_logic_ops() {
			return GetRuleContext<Binary_logic_opsContext>(0);
		}
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 48, RULE_binary);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
			case ADD:
			case SUBTRACT:
			case MULTIPLY:
			case DIVIDE:
			case EXPONENT:
			case MODULO:
			case SET_SUM:
			case SET_DIFFERENCE:
			case SET_PRODUCT:
			case SET_QUOTIENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; binary_arith_ops();
				}
				break;
			case LOGIC_OR:
			case LOGIC_AND:
			case LOGIC_NOT:
			case LOGIC_NAND:
			case LOGIC_NOR:
			case LOGIC_XOR:
			case LOGIC_XNOR:
			case GTR:
			case LSS:
			case EQU:
			case GTR_EQU:
			case LSS_EQU:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217; binary_logic_ops();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(KCCParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(KCCParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 50, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arith_exprContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(KCCParser.L_PARANTH, 0); }
		public Arith_exprContext[] arith_expr() {
			return GetRuleContexts<Arith_exprContext>();
		}
		public Arith_exprContext arith_expr(int i) {
			return GetRuleContext<Arith_exprContext>(i);
		}
		public ITerminalNode R_PARANTH() { return GetToken(KCCParser.R_PARANTH, 0); }
		public Value_idContext value_id() {
			return GetRuleContext<Value_idContext>(0);
		}
		public ITerminalNode SUBTRACT() { return GetToken(KCCParser.SUBTRACT, 0); }
		public ITerminalNode INCREMENT() { return GetToken(KCCParser.INCREMENT, 0); }
		public ITerminalNode DECRIMENT() { return GetToken(KCCParser.DECRIMENT, 0); }
		public Binary_arith_opsContext binary_arith_ops() {
			return GetRuleContext<Binary_arith_opsContext>(0);
		}
		public Arith_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arith_expr; } }
	}

	[RuleVersion(0)]
	public Arith_exprContext arith_expr() {
		return arith_expr(0);
	}

	private Arith_exprContext arith_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arith_exprContext _localctx = new Arith_exprContext(Context, _parentState);
		Arith_exprContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_arith_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L_PARANTH:
				{
				State = 223; Match(L_PARANTH);
				State = 224; arith_expr(0);
				State = 225; Match(R_PARANTH);
				}
				break;
			case TRUE:
			case FALSE:
			case DECIMAL:
			case IDENTIFIER:
				{
				State = 227; value_id();
				}
				break;
			case SUBTRACT:
				{
				State = 228; Match(SUBTRACT);
				State = 229; value_id();
				}
				break;
			case INCREMENT:
			case DECRIMENT:
				{
				State = 230;
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENT || _la==DECRIMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 231; value_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Arith_exprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arith_expr);
					State = 234;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 235; binary_arith_ops();
					State = 236; arith_expr(6);
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Type_specifierContext : ParserRuleContext {
		public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier; } }
	}

	[RuleVersion(0)]
	public Type_specifierContext type_specifier() {
		return type_specifier(0);
	}

	private Type_specifierContext type_specifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_specifierContext _localctx = new Type_specifierContext(Context, _parentState);
		Type_specifierContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_type_specifier, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 244;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << CLASS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_specifierContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type_specifier);
					State = 246;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 247; array();
					}
					} 
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(KCCParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(KCCParser.R_BRACKET, 0); }
		public Value_idContext value_id() {
			return GetRuleContext<Value_idContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 56, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(L_BRACKET);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << DECIMAL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 254; value_id();
				}
			}

			State = 257; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyContext : ParserRuleContext {
		public AssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly; } }
	}

	[RuleVersion(0)]
	public AssemblyContext assembly() {
		AssemblyContext _localctx = new AssemblyContext(Context, State);
		EnterRule(_localctx, 58, RULE_assembly);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==ASSEMBLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiContext : ParserRuleContext {
		public ITerminalNode SEMI() { return GetToken(KCCParser.SEMI, 0); }
		public SemiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semi; } }
	}

	[RuleVersion(0)]
	public SemiContext semi() {
		SemiContext _localctx = new SemiContext(Context, State);
		EnterRule(_localctx, 60, RULE_semi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 26: return arith_expr_sempred((Arith_exprContext)_localctx, predIndex);
		case 27: return type_specifier_sempred((Type_specifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool arith_expr_sempred(Arith_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool type_specifier_sempred(Type_specifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\x10A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x3', '\x2', '\x6', '\x2', '\x42', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '\x43', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x6', '\x4', 'O', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 
		'P', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x6', '\x4', 'Z', '\n', '\x4', '\r', '\x4', 
		'\xE', '\x4', '[', '\x3', '\x4', '\x5', '\x4', '_', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', 'g', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'j', 
		'\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 's', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x81', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x87', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x8A', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x91', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x9E', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xA6', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xAB', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xB2', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xB5', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xBC', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\xC1', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xC4', '\v', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xCD', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\xDD', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xEB', 
		'\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\xF1', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\xF4', 
		'\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\a', '\x1D', '\xFB', '\n', '\x1D', '\f', '\x1D', '\xE', 
		'\x1D', '\xFE', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x102', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x4', '\xB3', '\xC2', '\x5', 
		'\f', '\x36', '\x38', '!', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '\x2', '\xE', '\x3', '\x2', ';', ';', '\x3', '\x2', '\x39', 
		'\x39', '\x3', '\x2', '\x31', '\x32', '\x3', '\x2', '\v', '\xE', '\x3', 
		'\x2', '\xF', '\x12', '\x4', '\x2', '\x1E', '\x1F', '\"', '\"', '\x3', 
		'\x2', '\x13', '\x1D', '\x4', '\x2', '\x13', '\x13', '\x1A', '\x1D', '\x3', 
		'\x2', ' ', '+', '\x3', '\x2', '\x1E', '\x1F', '\x4', '\x2', '\x3', '\t', 
		'/', '/', '\x4', '\x2', '\n', '\n', '\x33', '\x33', '\x2', '\x111', '\x2', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x4', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '^', '\x3', '\x2', '\x2', '\x2', '\b', '`', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'r', '\x3', '\x2', '\x2', '\x2', '\f', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x10', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x96', '\x3', '\x2', '\x2', '\x2', '\x16', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xBB', '\x3', '\x2', '\x2', '\x2', ' ', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xC5', '\x3', '\x2', '\x2', '\x2', '$', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xCE', '\x3', '\x2', '\x2', '\x2', '(', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xD2', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '.', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x32', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\x38', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', ':', '\xFF', '\x3', '\x2', '\x2', '\x2', '<', '\x105', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x107', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x5', 
		'\x4', '\x3', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x2', '\x2', '\x3', '\x46', 
		'\x3', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x5', '<', '\x1F', '\x2', 
		'H', 'I', '\x5', ' ', '\x11', '\x2', 'I', 'J', '\x5', '\x6', '\x4', '\x2', 
		'J', '\x5', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\a', ':', '\x2', '\x2', 
		'L', 'O', '\x5', '\b', '\x5', '\x2', 'M', 'O', '\n', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', '_', '\a', ';', '\x2', '\x2', 'S', 'Y', '\a', ':', '\x2', '\x2', 
		'T', 'Z', '\x5', '\b', '\x5', '\x2', 'U', 'Z', '\x5', '\x10', '\t', '\x2', 
		'V', 'Z', '\x5', '\x6', '\x4', '\x2', 'W', 'Z', '\x5', '\f', '\a', '\x2', 
		'X', 'Z', '\n', '\x2', '\x2', '\x2', 'Y', 'T', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'U', '\x3', '\x2', '\x2', '\x2', 'Y', 'V', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', 
		'\x2', ']', '_', '\a', ';', '\x2', '\x2', '^', 'K', '\x3', '\x2', '\x2', 
		'\x2', '^', 'S', '\x3', '\x2', '\x2', '\x2', '_', '\a', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x61', '\a', '/', '\x2', '\x2', '\x61', '\x62', '\x5', 
		' ', '\x11', '\x2', '\x62', '\x63', '\x5', '\x6', '\x4', '\x2', '\x63', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x64', 's', '\x5', '\xE', '\b', '\x2', 
		'\x65', 'g', '\x5', '\f', '\a', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 's', '\x5', '>', 
		' ', '\x2', 'l', 'm', '\a', '?', '\x2', '\x2', 'm', 'n', '\a', '?', '\x2', 
		'\x2', 'n', 'o', '\x5', '\x1A', '\xE', '\x2', 'o', 'p', '\x5', '\x6', 
		'\x4', '\x2', 'p', 'q', '\x5', '>', ' ', '\x2', 'q', 's', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x64', '\x3', '\x2', '\x2', '\x2', 'r', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'l', '\x3', '\x2', '\x2', '\x2', 's', '\v', 
		'\x3', '\x2', '\x2', '\x2', 't', 'u', '\b', '\a', '\x1', '\x2', 'u', '\x81', 
		'\x5', '\x16', '\f', '\x2', 'v', '\x81', '\x5', '\x18', '\r', '\x2', 'w', 
		'\x81', '\x5', ' ', '\x11', '\x2', 'x', '\x81', '\x5', '\x1A', '\xE', 
		'\x2', 'y', 'z', '\x5', '*', '\x16', '\x2', 'z', '{', '\x5', '\f', '\a', 
		'\x6', '{', '\x81', '\x3', '\x2', '\x2', '\x2', '|', '\x81', '\x5', '\x34', 
		'\x1B', '\x2', '}', '~', '\x5', '\x38', '\x1D', '\x2', '~', '\x7F', '\x5', 
		' ', '\x11', '\x2', '\x7F', '\x81', '\x3', '\x2', '\x2', '\x2', '\x80', 
		't', '\x3', '\x2', '\x2', '\x2', '\x80', 'v', '\x3', '\x2', '\x2', '\x2', 
		'\x80', 'w', '\x3', '\x2', '\x2', '\x2', '\x80', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\x80', 'y', '\x3', '\x2', '\x2', '\x2', '\x80', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '}', '\x3', '\x2', '\x2', '\x2', '\x81', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\f', '\x5', '\x2', '\x2', 
		'\x83', '\x84', '\x5', '\x32', '\x1A', '\x2', '\x84', '\x85', '\x5', '\f', 
		'\a', '\x6', '\x85', '\x87', '\x3', '\x2', '\x2', '\x2', '\x86', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\r', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x5', ' ', '\x11', '\x2', 
		'\x8C', '\x8D', '\x5', '\x1A', '\xE', '\x2', '\x8D', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x91', '\x5', '\x12', '\n', '\x2', '\x8F', '\x91', 
		'\x5', '\x14', '\v', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x93', '\x5', '$', '\x13', '\x2', '\x93', '\x94', 
		'\x5', '\x14', '\v', '\x2', '\x94', '\x95', '\x5', '\x6', '\x4', '\x2', 
		'\x95', '\x13', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x5', '$', 
		'\x13', '\x2', '\x97', '\x98', '\x5', '\x1A', '\xE', '\x2', '\x98', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x5', '$', '\x13', '\x2', 
		'\x9A', '\x9D', '\x5', '.', '\x18', '\x2', '\x9B', '\x9E', '\x5', '\x1E', 
		'\x10', '\x2', '\x9C', '\x9E', '\x5', '\f', '\a', '\x2', '\x9D', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x17', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x5', '$', 
		'\x13', '\x2', '\xA0', '\xA1', '\x5', '\x16', '\f', '\x2', '\xA1', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', '$', '\x13', '\x2', 
		'\xA3', '\xA4', '\x5', ' ', '\x11', '\x2', '\xA4', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xAA', '\a', '\x38', '\x2', '\x2', '\xA8', '\xAB', '\x5', '\f', 
		'\a', '\x2', '\xA9', '\xAB', '\n', '\x3', '\x2', '\x2', '\xAA', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAD', '\a', '\x39', '\x2', '\x2', '\xAD', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x5', '$', '\x13', '\x2', 
		'\xAF', '\xB0', '\a', '\x35', '\x2', '\x2', '\xB0', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', 
		'\a', '?', '\x2', '\x2', '\xB7', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xBC', '\a', '>', '\x2', '\x2', '\xB9', '\xBC', '\a', '?', '\x2', '\x2', 
		'\xBA', '\xBC', '\x5', '\"', '\x12', '\x2', '\xBB', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xC2', '\a', '?', '\x2', '\x2', '\xBE', '\xBF', '\a', '\x35', 
		'\x2', '\x2', '\xBF', '\xC1', '\a', '?', '\x2', '\x2', '\xC0', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '!', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\t', '\x4', '\x2', '\x2', 
		'\xC6', '#', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCD', '\x5', '\x38', 
		'\x1D', '\x2', '\xC8', '\xCD', '\x5', ' ', '\x11', '\x2', '\xC9', '\xCD', 
		'\x5', '&', '\x14', '\x2', '\xCA', '\xCD', '\a', '\x11', '\x2', '\x2', 
		'\xCB', '\xCD', '\x5', '(', '\x15', '\x2', '\xCC', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\t', '\x5', '\x2', '\x2', '\xCF', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\t', '\x6', '\x2', '\x2', 
		'\xD1', ')', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\t', '\a', '\x2', 
		'\x2', '\xD3', '+', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\t', 
		'\b', '\x2', '\x2', '\xD5', '-', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\t', '\t', '\x2', '\x2', '\xD7', '/', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xD9', '\t', '\n', '\x2', '\x2', '\xD9', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDD', '\x5', ',', '\x17', '\x2', '\xDB', '\xDD', '\x5', 
		'\x30', '\x19', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\t', '\x4', '\x2', '\x2', '\xDF', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE1', '\b', '\x1C', '\x1', '\x2', '\xE1', 
		'\xE2', '\a', '\x38', '\x2', '\x2', '\xE2', '\xE3', '\x5', '\x36', '\x1C', 
		'\x2', '\xE3', '\xE4', '\a', '\x39', '\x2', '\x2', '\xE4', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xEB', '\x5', '\x1E', '\x10', '\x2', '\xE6', 
		'\xE7', '\a', '\x15', '\x2', '\x2', '\xE7', '\xEB', '\x5', '\x1E', '\x10', 
		'\x2', '\xE8', '\xE9', '\t', '\v', '\x2', '\x2', '\xE9', '\xEB', '\x5', 
		'\x1E', '\x10', '\x2', '\xEA', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xED', '\f', '\a', '\x2', '\x2', '\xED', 
		'\xEE', '\x5', ',', '\x17', '\x2', '\xEE', '\xEF', '\x5', '\x36', '\x1C', 
		'\b', '\xEF', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\x37', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF6', '\b', '\x1D', '\x1', '\x2', '\xF6', 
		'\xF7', '\t', '\f', '\x2', '\x2', '\xF7', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF9', '\f', '\x3', '\x2', '\x2', '\xF9', '\xFB', '\x5', 
		':', '\x1E', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x101', '\a', '\x36', '\x2', '\x2', '\x100', '\x102', '\x5', '\x1E', 
		'\x10', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\a', '\x37', '\x2', '\x2', '\x104', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\t', '\r', '\x2', '\x2', '\x106', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\a', '@', '\x2', '\x2', 
		'\x108', '?', '\x3', '\x2', '\x2', '\x2', '\x19', '\x43', 'N', 'P', 'Y', 
		'[', '^', 'h', 'r', '\x80', '\x88', '\x90', '\x9D', '\xA5', '\xAA', '\xB3', 
		'\xBB', '\xC2', '\xCC', '\xDC', '\xEA', '\xF2', '\xFC', '\x101',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
